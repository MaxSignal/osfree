

#  Makefile variables for FreePM
#
#  Viking




# !include ../watcom.mif

!include ../build.conf
!include ../mk/site.mk

32_BITS  = 1

!include ../mk/all.mk

#defines files mask for clean target
CLEANMASK = *.lnk *.map *.obj *.err *.log *.bak *.sym


sep=/

#        /pub/FreePM/FreePM/    $(bas)
bas=$(sep)pub$(sep)FreePM$(sep)FreePM$(sep)

#        $(bas)/lpng
lpng_dir=$(bas)lib$(sep)lpng
zlib_dir=$(bas)lib$(sep)Zlib
jpeg_dir=$(bas)lib$(sep)JpegLib

#
freepm_client_dir=$(bas)src_c
freepm_lib_dir=$(bas)lib
freepm_inc_dir=$(bas)include

# lib/Zlib  lib/JpegLib  lib/lpng  lib/GDLib  src_c  src_s

SYSTEM_TARGET=os2v2
# SYSTEM_TARGET=os2v2 linux
# -bt=os2v2
# wlink system os2v2
# FreePMs.exe DEBUG WATCOM All

DEBUG_TARGET=DEBUG WATCOM All

#EXE_SUFFIX=
EXE_SUFFIX=.exe
OBJEXT=.o

CC=wcc386
CPP=wpp386

SERVER_EXE=FreePMs$(EXE_SUFFIX)
CLIENT_EXE=FreePM$(EXE_SUFFIX)

ALL_CFLAGS= -bm -od -mf -sg
SERVER_CFLAGS= -d2 -db -ef -mf -hw -v  $(ALL_CFLAGS)
CLIENT_CFLAGS= -d2  -mf $(ALL_CFLAGS)
ZLIB_CFLAGS=    $(ALL_CFLAGS)
JPEGLIB_CFLAGS= $(ALL_CFLAGS)
LPNG_CFLAGS=  $(ALL_CFLAGS)
GDLIB_CFLAGS= $(ALL_CFLAGS)

# -i/mnt/rei2/NuDawn/os2linux/include
#  lib /mnt/rei2/NuDawn/os2linux/lib/libos2.a

SERVER_LDFLAGS= option map
CLIENT_LDFLAGS=

#  option stack=3m
# Strange, the server crashes with debug build! No, it crashes for some else reason.
# Found it! To little heapsize! Was only 287 KiB while it assumed 2.6 MiB!
# It must be set with stack= not with heapsize= !
# Changing the stack size has no effect at all.
# Increased the stack for threads
# 65 KiB from 32 KB. Hope it works or else I have to change the stack manually.
# Fixed! With help from Valerius. Added the switch "-sg" which grows the stack.

# wlink
# option map[=map_file]

# wpp386/wcc386
#
# -ef             use full path names in error messages
# -hw             generate Watcom debugging information
# -v              output function declarations to .def file

# *wcc386 hello.c -i=c:\program\WATCOM\h;c:\program\WATCOM\h\os2 -w4 -e25 -zq&
# -od -d2 -6r -bt=os2 -mf
#
# -db           generate browsing information
# -od     -> disable all optimizations
# -d2     full symbolic debugging information
# -6r     Pentium Pro register calling conventions
# -bt=<id>      build target for operating system <id>
# -mf     flat memory model (small code/small data assuming CS=DS=SS=ES)
# -zq           operate quietly (equivalent to -q)
# -e=<num>      set limit on number of error messages
# -w=<num>      set warning level number
# -i=<path>     add another include path
# -bm             build target is a multi-thread environment



#Posted: Tue Jun 19, 2007 5:47 pm    Post subject:
#
#2Viking: Acoording the stack. Maybe the problem is with variables on stack crossing
#the guard page boundary? Then an option for wcc386 "-sg" may help "generate code to
#grow the stack. It touches the guard page to grow the stack for the stack to contain
#all variables on this stack/
#_________________
#WBR,
#Valery V. Sedletski


