
/*
 * This file was generated by the SOM Compiler.
 * FileName: pas.ih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitih: 2.47
 */

/*
 *         File:    Pascal.idl
 *       Author:    SOMObjects Emitter Framework
 *     Contents:    Generic framework logic class for Pascal.
 *         Date:    Tue Sep 21 20:16:43 2004.
 */


/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_PascalEmitter_ih
#define SOM_PascalEmitter_ih

#pragma checkout(suspend)

#include <pas.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif  /* SOM_Scope */

#ifndef SOM_CurrentClass
    #define SOM_CurrentClass PascalEmitterCClassData.parentMtab
#endif  /* SOM_CurrentClass */

#define PascalEmitter_MaxNoMethods 0

/*
 * -- Instance data
 */
typedef struct {
	_IDL_SEQUENCE_PascalEmitter_PTYPEITEM TypeItems;
        /*
         *  список объектов-носителей типов
         */
	unsigned long CurrentPasSection;
        /*
         *  текущая выводимая секция паскаля
         */
	char* buf;
        /*
         *  буфер для различных промежуточных данных
         */
	long bufLength;
        /*
         *  размер буфера для различных промежуточных данных
         */
} PascalEmitterData;

/*
 * GetData macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef PascalEmitterData* SOMLINK somTP_PascalEmitter_DataThunk(void*);
#ifdef __IBMC__
#pragma linkage(somTP_PascalEmitter_DataThunk, system)
#endif
typedef somTP_PascalEmitter_DataThunk *somTD_PascalEmitter_DataThunk;

#define PascalEmitterGetData(somSelf) \
   (((somTD_PascalEmitter_DataThunk)(PascalEmitterCClassData.instanceDataToken))(somSelf))

/*
 * Instance variable and staticdata access macros
 */
#ifndef NO_VARIABLE_MACROS
#define _TypeItems (somThis->TypeItems)
#define _CurrentPasSection (somThis->CurrentPasSection)
#define _buf (somThis->buf)
#define _bufLength (somThis->bufLength)
#endif

/*
 * Primary Implementation File Support
 */
#if (defined(PascalEmitter_Class_Source) || defined(SOM_Module_pas_Source))

/*
 * Trace/Debug macro
 */
#ifndef PascalEmitterMethodDebug
   #define PascalEmitterMethodDebug(c,m) SOMMethodDebug(c,m)
#endif  /* PascalEmitterMethodDebug */

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_PascalEmitterCClassData.parentMtab
#undef SOMInstance
#define SOMInstance PascalEmitterCClassData.parentMtab

#ifndef M_PascalEmitter_Class_Source
   #define M_PascalEmitter_Class_Source
#endif    /* M_PascalEmitter_Class_Source */

/*
 * Overridden method: somtGenerateSections
 */
#pragma linkage(somtGenerateSections, system)
SOM_Scope boolean  SOMLINK somtGenerateSections(PascalEmitter *somSelf);
static char *somMN_PascalEmittersomtGenerateSections = "SOMTEmitC::somtGenerateSections";
static somId somId_PascalEmittersomtGenerateSections = &somMN_PascalEmittersomtGenerateSections;
#ifdef somId_somtGenerateSections
#undef somId_somtGenerateSections
#else
#define somId_somtGenerateSections somId_PascalEmittersomtGenerateSections
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtGenerateSections_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtGenerateSections(somSelf) \
  ((( somTD_SOMTEmitC_somtGenerateSections ) \
    PascalEmitter_parent_SOMTEmitC_somtGenerateSections_resolved) \
	 (somSelf))
#ifndef SOMGD_pmc_SOMTEmitC_somtGenerateSections
  #ifdef parent_SOMTEmitC_somtGenerateSections
     #undef parent_SOMTEmitC_somtGenerateSections
     #define SOMGD_pmc_SOMTEmitC_somtGenerateSections 1
  #else
     #define parent_SOMTEmitC_somtGenerateSections PascalEmitter_parent_SOMTEmitC_somtGenerateSections
  #endif /* parent_SOMTEmitC_somtGenerateSections */
#endif /* SOMGD_pmc_SOMTEmitC_somtGenerateSections */
#ifndef parent_somtGenerateSections
     #define parent_somtGenerateSections PascalEmitter_parent_SOMTEmitC_somtGenerateSections
#endif  /* parent_somtGenerateSections */
#define PascalEmitter_parents_somtGenerateSections(somSelf) (\
   PascalEmitter_parent_SOMTEmitC_somtGenerateSections(somSelf))

/*
 * Overridden method: somtEmitInterface
 */
#pragma linkage(somtEmitInterface, system)
SOM_Scope void  SOMLINK somtEmitInterface(PascalEmitter *somSelf,
		SOMTClassEntryC* intfc);
static char *somMN_PascalEmittersomtEmitInterface = "SOMTEmitC::somtEmitInterface";
static somId somId_PascalEmittersomtEmitInterface = &somMN_PascalEmittersomtEmitInterface;
#ifdef somId_somtEmitInterface
#undef somId_somtEmitInterface
#else
#define somId_somtEmitInterface somId_PascalEmittersomtEmitInterface
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtEmitInterface_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtEmitInterface(somSelf,intfc) \
  ((( somTD_SOMTEmitC_somtEmitInterface ) \
    PascalEmitter_parent_SOMTEmitC_somtEmitInterface_resolved) \
	 (somSelf,intfc))
#ifndef SOMGD_pmc_SOMTEmitC_somtEmitInterface
  #ifdef parent_SOMTEmitC_somtEmitInterface
     #undef parent_SOMTEmitC_somtEmitInterface
     #define SOMGD_pmc_SOMTEmitC_somtEmitInterface 1
  #else
     #define parent_SOMTEmitC_somtEmitInterface PascalEmitter_parent_SOMTEmitC_somtEmitInterface
  #endif /* parent_SOMTEmitC_somtEmitInterface */
#endif /* SOMGD_pmc_SOMTEmitC_somtEmitInterface */
#ifndef parent_somtEmitInterface
     #define parent_somtEmitInterface PascalEmitter_parent_SOMTEmitC_somtEmitInterface
#endif  /* parent_somtEmitInterface */
#define PascalEmitter_parents_somtEmitInterface(somSelf,intfc) (\
   PascalEmitter_parent_SOMTEmitC_somtEmitInterface(somSelf,intfc))

/*
 * Overridden method: somtEmitClass
 */
#pragma linkage(somtEmitClass, system)
SOM_Scope void  SOMLINK somtEmitClass(PascalEmitter *somSelf);
static char *somMN_PascalEmittersomtEmitClass = "SOMTEmitC::somtEmitClass";
static somId somId_PascalEmittersomtEmitClass = &somMN_PascalEmittersomtEmitClass;
#ifdef somId_somtEmitClass
#undef somId_somtEmitClass
#else
#define somId_somtEmitClass somId_PascalEmittersomtEmitClass
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtEmitClass_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtEmitClass(somSelf) \
  ((( somTD_SOMTEmitC_somtEmitClass ) \
    PascalEmitter_parent_SOMTEmitC_somtEmitClass_resolved) \
	 (somSelf))
#ifndef SOMGD_pmc_SOMTEmitC_somtEmitClass
  #ifdef parent_SOMTEmitC_somtEmitClass
     #undef parent_SOMTEmitC_somtEmitClass
     #define SOMGD_pmc_SOMTEmitC_somtEmitClass 1
  #else
     #define parent_SOMTEmitC_somtEmitClass PascalEmitter_parent_SOMTEmitC_somtEmitClass
  #endif /* parent_SOMTEmitC_somtEmitClass */
#endif /* SOMGD_pmc_SOMTEmitC_somtEmitClass */
#ifndef parent_somtEmitClass
     #define parent_somtEmitClass PascalEmitter_parent_SOMTEmitC_somtEmitClass
#endif  /* parent_somtEmitClass */
#define PascalEmitter_parents_somtEmitClass(somSelf) (\
   PascalEmitter_parent_SOMTEmitC_somtEmitClass(somSelf))

/*
 * Initialize the class data structure
 */
SOMEXTERN struct PascalEmitterClassDataStructure SOMDLINK PascalEmitterClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
SOMEXTERN struct PascalEmitterCClassDataStructure SOMDLINK PascalEmitterCClassData = {(somMethodTabs) NULL};

/*
 * Routines and Structures to create the class object
 */


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t PascalEmitterOM[] = {
    {    &somId_PascalEmittersomtGenerateSections,
         (somMethodProc *) somtGenerateSections    },
    {    &somId_PascalEmittersomtEmitInterface,
         (somMethodProc *) somtEmitInterface    },
    {    &somId_PascalEmittersomtEmitClass,
         (somMethodProc *) somtEmitClass    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_PascalEmitter = "PascalEmitter";
static char * somPCN_PascalEmitter_SOMTEmitC = "SOMTEmitC";

static somId somPCPascalEmitter[] = {
    &somPCN_PascalEmitter_SOMTEmitC,
};

static somStaticClassInfo PascalEmitterSCI = {
    4, 0, 3, 0, 0, 0,
    PascalEmitter_MajorVersion, PascalEmitter_MinorVersion,
    sizeof(PascalEmitterData), PascalEmitter_MaxNoMethods, 1,
    &somCN_PascalEmitter,
    (somId) NULL, 1,
    somPCPascalEmitter,
    (somClassDataStructure *) &PascalEmitterClassData,
    (somCClassDataStructure *) &PascalEmitterCClassData,
    (somStaticMethod_t *) NULL, PascalEmitterOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as directinitclasses */
    0, /* no explicit directinitclasses */
    0, /* number of general method entries */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of classdata entries */
    0, /* no entry names provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* used to identify a DTS class */
    0, /* used to register dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK PascalEmitterNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;

    if (_PascalEmitter && _somCheckVersion(_PascalEmitter, somtmajorVersion, somtminorVersion))
          return _PascalEmitter;
    SOMTEmitCNewClass(SOMTEmitC_MajorVersion,SOMTEmitC_MinorVersion);	/* static reference */
    result = somBuildClass(0xFFFFFFFF,&PascalEmitterSCI, somtmajorVersion, somtminorVersion);
    PascalEmitter_parent_SOMTEmitC_somtEmitClass_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtEmitClass); 
    PascalEmitter_parent_SOMTEmitC_somtEmitInterface_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtEmitInterface); 
    PascalEmitter_parent_SOMTEmitC_somtGenerateSections_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtGenerateSections); 
    return result;
}

/*
 * Functions for attributes.
 */

#endif /* Primary Implementation Support */
#pragma checkout(resume)

#endif       /* SOM_PascalEmitter_ih */
